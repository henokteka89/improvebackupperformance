https://www.mssqltips.com/sqlservertip/4935/optimize-sql-server-database-restore-performance/

--BABACKUP PROGRESS
SELECT 
   session_id as SPID, command, a.text AS Query, start_time, percent_complete,
   dateadd(second,estimated_completion_time/1000, getdate()) as estimated_completion_time
FROM sys.dm_exec_requests r 
   CROSS APPLY sys.dm_exec_sql_text(r.sql_handle) a 
WHERE r.command in ('BACKUP DATABASE','RESTORE DATABASE') 

--ERRORLOG REGARDING THE RESTORE
declare @dtfromdate datetime = dateadd(hour, -1, getdate()),
		@dttodate datetime = getdate()
exec xp_readerrorlog 0,1,null,null, @dtfromdate, @dttodate


To even get faster backups and restores, you could also look at these things:

Parallel backup operations
Backup device performance
Instant file initialization
Data compression
Backup compression


/*
BACKUP DATABASE [StackOverflow2010] TO  
DISK = N'G:\Backup stackoverflow2010\stackoverflow2010_bak1', 
DISK = N'G:\Backup stackoverflow2010\stackoverflow2010_bak2',
DISK = N'G:\Backup stackoverflow2010\stackoverflow2010_bak3',
DISK = N'G:\Backup stackoverflow2010\stackoverflow2010_bak4',
DISK = N'G:\Backup stackoverflow2010\stackoverflow2010_bak5',
DISK = N'G:\Backup stackoverflow2010\stackoverflow2010_bak6',
DISK = N'G:\Backup stackoverflow2010\stackoverflow2010_bak7'
WITH NOFORMAT, NOINIT,  
NAME = N'StackOverflow2010-Full Database Backup', 
SKIP, NOREWIND, NOUNLOAD, COMPRESSION,  STATS = 10, CHECKSUM
GO
/*

/*
 
/*
USE [master]
RESTORE DATABASE [StackOverflow2010] 
FROM  
DISK = N'G:\Backup stackoverflow2010\stackoverflow2010_bak1',  
DISK = N'G:\Backup stackoverflow2010\stackoverflow2010_bak2',  
DISK = N'G:\Backup stackoverflow2010\stackoverflow2010_bak3',  
DISK = N'G:\Backup stackoverflow2010\stackoverflow2010_bak4',  
DISK = N'G:\Backup stackoverflow2010\stackoverflow2010_bak5',  
DISK = N'G:\Backup stackoverflow2010\stackoverflow2010_bak6',  
DISK = N'G:\Backup stackoverflow2010\stackoverflow2010_bak7' 
WITH  FILE = 1,  MOVE N'StackOverflow2010' 
TO N'G:\StackOverflow2010.mdf',  NOUNLOAD,  STATS = 5
,maxtransfersize = 4194302, buffercount = 400
---
--Drop database stackoverflow2010
USE [master]
Restore database [StackOverflow2010]
FROM 
DISK = N'E:\FullBackup\stackoverflow2010'
WITH  FILE = 1,  MOVE N'StackOverflow2010' 
TO N'G:\StackOverflow2010.mdf',  NOUNLOAD,  STATS = 5

,maxtransfersize = 4194302, buffercount = 400

---
BACKUP DATABASE [StackOverflow2010] 
TO  DISK = N'E:\FullBackup\stackoverflow2010' WITH NOFORMAT, NOINIT,  
NAME = N'StackOverflow2010-Full Database Backup', 
SKIP, NOREWIND, NOUNLOAD,  STATS = 10
,maxtransfersize = 4194302, buffercount = 400
GO

 --BABACKUP PROGRESS
SELECT 
   session_id as SPID, command, a.text AS Query, start_time, percent_complete,
   dateadd(second,estimated_completion_time/1000, getdate()) as estimated_completion_time
FROM sys.dm_exec_requests r 
   CROSS APPLY sys.dm_exec_sql_text(r.sql_handle) a 
WHERE r.command in ('BACKUP DATABASE','RESTORE DATABASE') 

/*
--Traceflag 3213, traces SQL Server activity during backup/restore
--Traceflag 3605, output trace information to SQL Server Log
---https://www.sqlservercentral.com/blogs/optimizing-sql-server-backup-and-restore (this is a MUST READ)
--Enable trace flags to catch more info
DBCC TRACEON (3213, -1)
DBCC TRACEON (3605, -1)
--Disable trace flags
DBCC TRACEOFF (3213, -1)
DBCC TRACEOFF (3605, -1)
---check traceflag status
DBCC TRACESTATUS

--ERRORLOG REGARDING THE RESTORE
declare @dtfromdate datetime = dateadd(hour, -1, getdate()),
		@dttodate datetime = getdate()
exec xp_readerrorlog 0,1,null,null, @dtfromdate, @dttodate
/*

https://www.mssqltips.com/sqlservertip/2343/how-to-monitor-backup-and-restore-progress-in-sql-server/
SQL Restore Stuck at 100%
I would like to touch base upon one aspect of SQL Server which you will encounter while restoring databases. You may see that the restore is stuck at 100% or around 99.99% and is not moving further. Sometimes for databases that are very large, TB size databases, it may even take 5 hours for the recovery to complete. To understand this situation we need to understand the different phases that a restore goes through.

The three phases are Data Copy phase, Redo phase and Undo phase.

While you may see the restore is 100% complete it's actually only the Data Copy phase that is complete and then SQL proceeds to subsequent phases before the recovery is totally complete.
In the Redo phase, all the committed transactions present in the transaction log when the database was being backed up are rolled forward.
In the Undo phase, all the uncommitted transactions in the transaction log while the database was being backed up are rolled back.
If the database is being restored with NORECOVERY, the Undo phase is skipped.

Unfortunately, SQL Server does not show the progress during the Redo and Undo phases as it does in the Data Copy phase. So, depending upon the activity in the database at the time it was getting backed up will decide the overall total recovery time.

---
https://www.sqlservercentral.com/blogs/optimizing-sql-server-backup-and-restore
Backup to multiple files (benefit)

Another option to speed up backup’s is using multiple files to backup your database. When performing a backup to one file SQL Server will only use one CPU to perform that backup operation. 
If you create multiple files SQL Server will use multiple CPU’s, one for every backup file. This can have a positive impact on your backup operation.
---
https://www.mssqltips.com/sqlservertip/2343/how-to-monitor-backup-and-restore-progress-in-sql-server/
---This is the query I use to get Pct complete for either backup or restores:
SELECT
session_id as SPID,
command,
a.text AS Query,
start_time,
percent_complete,
CAST(((DATEDIFF(s,start_time,GETDATE()))/3600) AS VARCHAR) + ' hour(s), '
+ CAST((DATEDIFF(s,start_time,GETDATE())%3600)/60 AS VARCHAR) + 'min, '
+ CAST((DATEDIFF(s,start_time,GETDATE())%60) AS VARCHAR) + ' sec' AS running_time,
CAST((estimated_completion_time/3600000) AS VARCHAR) + ' hour(s), '
+ CAST((estimated_completion_time %3600000)/60000 AS VARCHAR) + 'min, '
+ CAST((estimated_completion_time %60000)/1000 as VARCHAR) + ' sec' AS est_time_to_go,
DATEADD(SECOND,estimated_completion_time/1000, GETDATE()) AS estimated_completion_time
FROM sys.dm_exec_requests r
CROSS APPLY sys.dm_exec_sql_text(r.sql_handle) a
WHERE r.command IN ('BACKUP DATABASE','RESTORE DATABASE', 'BACKUP LOG','RESTORE LOG')
